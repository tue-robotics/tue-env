# GitLab CI configuration to use SSH and docker registry
#
# Prerequisities:
# 1. Generate a password less SSH key on a local machine
# 2. Add the public key as a deploy key to the repository/group
# 3. Add the private key as a variable (e.g. SSH_KEY_PRIVATE) to the repository/group
#
# Scheduled branch mirroring:
# 1. Allow the CI deploy key to have write access
# 2. In the pipelines schedule configuration, set:
#      - MIRROR_UPSTREAM = true
# 3. Set the remaining variables to appropriate values:
#      - REMOTE_URL
#      - REMOTE_BRANCH
#      - LOCAL_REMOTE_BRANCH

# Base config that other jobs extend from
stages:
  - build
  - release

.base:
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/docker-buildx:latest

  services:
    - docker:dind

  variables:
    GIT_STRATEGY: clone
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_DRIVER: overlay2

  before_script:
    - apk --update add git bash curl jq
    - which ssh-agent || ( apk --update add openssh-client)
    # To build and push the docker image of private repository to the container registry SSH
    # needs to be setup in the CI environment
    - eval $(ssh-agent -s)
    - |
      cat <<EOT | ssh-add -
      -----BEGIN OPENSSH PRIVATE KEY-----
      ${CI_SSH_KEY_PRIVATE}
      -----END OPENSSH PRIVATE KEY-----
      EOT
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

# Job template to build docker image
# variables to be defined:
#   1.  TARGET_PLATFORM (linux/amd64, linux/arm64)
.build_docker_image_template:
  extends: .base
  stage: build
  script:
    - docker info
    - docker buildx inspect
    - |
      ci/build-docker-image.sh \
        --ssh \
        --image="${CI_REGISTRY}/${CI_PROJECT_PATH}" \
        --branch=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-$CI_COMMIT_BRANCH} \
        --commit="${CI_COMMIT_SHA}" \
        --pull_request=${CI_MERGE_REQUEST_IID:-"false"} \
        --ref-name="merge-requests" \
        --user="gitlab-ci-token" \
        --password="${CI_JOB_TOKEN}" \
        --registry="${CI_REGISTRY}" \
        --platforms="${TARGET_PLATFORM}" \
        --push_image="${PUSH_IMAGE:-"false"}" \
        --ros_version="${ROS_VERSION:-"1"}"

# Build docker image job for linux/arm64 and linux/amd64
amd64_ros1:
  extends: .build_docker_image_template
  tags:
    - linux
    - docker-privileged
    - x86_64
  variables:
    TARGET_PLATFORM: "amd64"
    ROS_VERSION: "1"
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
      when: 'never'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        PUSH_IMAGE: "true"

arm64_ros1:
  extends: .build_docker_image_template
  tags:
    - linux
    - docker-privileged
    - arm64
  variables:
    TARGET_PLATFORM: "arm64"
    ROS_VERSION: "1"
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
      when: 'never'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: 'never'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        PUSH_IMAGE: "true"

amd64_ros2:
  extends: .build_docker_image_template
  tags:
    - linux
    - docker-privileged
    - x86_64
  variables:
    TARGET_PLATFORM: "amd64"
    ROS_VERSION: "2"
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
      when: 'never'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        PUSH_IMAGE: "true"

arm64_ros2:
  extends: .build_docker_image_template
  tags:
    - linux
    - docker-privileged
    - arm64
  variables:
    TARGET_PLATFORM: "arm64"
    ROS_VERSION: "2"
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
      when: 'never'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: 'never'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        PUSH_IMAGE: "true"

release_ros1:
  extends: .base
  stage: release
  tags:
    - linux
    - docker-privileged
  script:
    - echo "${CI_JOB_TOKEN}" | docker login ${CI_REGISTRY} -u "gitlab-ci-token" --password-stdin
    - docker manifest create ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-ros1-amd64 ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-ros1-arm64
    - docker manifest push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest
    - docker manifest inspect --verbose ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
      when: 'never'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

release_ros2:
  extends: .base
  stage: release
  tags:
    - linux
    - docker-privileged
  script:
    - echo "${CI_JOB_TOKEN}" | docker login ${CI_REGISTRY} -u "gitlab-ci-token" --password-stdin
    - docker manifest create ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-ros2 ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-ros2-amd64 ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-ros2-arm64
    - docker manifest push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-ros2
    - docker manifest inspect --verbose ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-ros2
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
      when: 'never'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Job to mirror upstream
Mirror Upstream:
  extends: .base
  tags:
    - linux
    - docker-privileged
  stage: build
  script:
    - ci/mirror-upstream.bash --upstream-remote-url="$REMOTE_URL" --local-remote-url="git@gitlab.com:$CI_PROJECT_PATH" --upstream-remote-branch="$REMOTE_BRANCH" --local-remote-branch="$LOCAL_REMOTE_BRANCH" --user="$GITLAB_USER_NAME" --email="$GITLAB_USER_EMAIL"
  rules:
    - if: '$MIRROR_UPSTREAM == "true"'
