#! /usr/bin/env python3

from __future__ import annotations

from os import PathLike
from pathlib import Path
from typing import List

import os
import sys
import traceback


class SetupGenerator:
    def __init__(self, tue_env_dir: PathLike | None = None):
        if tue_env_dir is None:
            tue_env_dir = os.environ["TUE_ENV_DIR"]
        tue_env_dir = Path(tue_env_dir)
        if not tue_env_dir.parts:
            raise ValueError("'tue_env_dir' can't be empty as it would resolve to '/'")
        self._tue_env_dir = tue_env_dir
        self._tue_dependencies_dir = self._tue_env_dir / ".env" / "dependencies"
        tue_env_targets_dir = Path(os.environ["TUE_ENV_TARGETS_DIR"])
        if not tue_env_targets_dir.parts:
            raise ValueError("'tue_env_targets_dir' can't be empty as it would resolve to '/'")
        self._tue_env_targets_dir = tue_env_targets_dir

        self._visited_targets = set()

    def generate_setup_file(self) -> None:
        installed_targets_dir = self._tue_env_dir / ".env" / "installed"

        lines = ["#! /usr/bin/env bash\n", "# This file was auto-generated by tue-get. Do not change this file.\n"]

        if self._tue_dependencies_dir.is_dir():
            for target in installed_targets_dir.iterdir():
                lines.extend(self._generate_setup_file_rec(target.name))

        setup_dir = self._tue_env_dir / ".env" / "setup"
        setup_dir.mkdir(parents=True, exist_ok=True)
        setup_file = setup_dir / "target_setup.bash"
        with setup_file.open("w") as f:
            f.writelines(lines)

    def _generate_setup_file_rec(self, target: str) -> List[str]:
        if target in self._visited_targets:
            return []

        self._visited_targets.add(target)

        target_dep_file = self._tue_dependencies_dir / target
        if not target_dep_file.is_file():
            return []

        with target_dep_file.open("r") as dep_f:
            deps = dep_f.readlines()

        lines = []
        for dep in map(lambda x: x.strip(), deps):
            # You shouldn't depend on yourself
            if dep == target:
                continue
            lines.extend(self._generate_setup_file_rec(dep))

        target_setup_file = self._tue_env_targets_dir / target / "setup"
        if target_setup_file.is_file():
            rel_target_setup_file = target_setup_file.relative_to(self._tue_env_dir)
            lines.append(f"source ${{TUE_ENV_DIR}}/{rel_target_setup_file}\n")

        return lines


def main() -> int:
    try:
        generator = SetupGenerator()
        generator.generate_setup_file()
    except Exception as e:
        print(f"ERROR: Could not generate setup file: {repr(e)}\n{traceback.format_exc()}")
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
