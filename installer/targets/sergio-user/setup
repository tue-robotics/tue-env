#!/bin/bash

export ROBOT_BRINGUP_PATH=$TUE_SYSTEM_DIR/src/sergio_bringup
alias sergio-core='export ROS_MASTER_URI=http://sergio1.local:11311'

# ----------------------------------------------------------------------------
# - Add scripts directory to PATH
export PATH=~/.tue/installer/targets/sergio-user/scripts:$PATH

####################
#
# LOCAL PUBLISHERS
#
####################

alias sergio-publish-ed='rosrun ed_gui_server ed_rviz_publisher /ed/gui/entities:=/sergio/ed/gui/entities ed/gui/query_meshes:=/sergio/ed/gui/query_meshes ed/rviz:=/sergio/world_model'

alias sergio-publish-point-cloud='rosrun rgbd rgbd_to_ros /sergio/top_kinect/rgbd __ns:=sergio'

####################
#
# AUDIO
#
####################

alias sergio-audio-server='rosnode kill /sergio/audio_player && rosrun text_to_speech player.py play:=audio_player/play __ns:=sergio'

function sergio-audio-play
{
    if [ -z "$1" ]
    then
        echo "Please provide audio file."
        return
    fi

    rosrun text_to_speech play.py $1 /sergio/audio_player/play
}

####################
#
# SSH
#
####################
alias sshsergio1='until ssh -qo ConnectTimeout=1 amigo@sergio1.local; do echo waiting for sergio1 to come online...; sleep 2; done'
alias sshsergio2='until ssh -qo ConnectTimeout=1 amigo@sergio2.local; do echo waiting for sergio2 to come online...; sleep 2; done'

#####################
#
# DIAGNOSTICS
#
#####################
alias diag='rosrun robot_monitor robot_monitor'
alias sergio-dashboard='tue-dashboard sergio1.local & sleep 1; disown; wmctrl -r ws://sergio1.local:9090 -b add,sticky'

alias sergio-show-fitter='rosrun rgbd multitool --rgbd /sergio/ed/viz/fitter'
alias sergio-show-kinect='rosrun rgbd multitool --rgbd /sergio/top_kinect/rgbd'

# --------------------------------------------------------------------------------

alias sergio-show-ed-kinect='rosrun rgbd multitool --rgbd /sergio/ed/kinect/viz/update_request'

# --------------------------------------------------------------------------------


####################
#
# SERGIO STARTUP
#
####################

alias sergio='export ROBOT_BRINGUP_PATH=$TUE_SYSTEM_DIR/src/sergio_bringup'

alias sergio-continui='rosrun hmi_server continue_gui.py __ns:=sergio/hmi'
alias sergio-continui-gpsr='rosrun hmi_server continue_gui.py $TUE_SYSTEM_DIR/src/challenge_gpsr/src/grammar_gui.fcfg __ns:=sergio/hmi'

####################
#
# SERGIO ACTIONS
#
####################

alias sergio-say='rostopic pub --once /sergio/text_to_speech/input std_msgs/String'
function sergio-zeg() {
        rosservice call /sergio/text_to_speech/speak "{language: 'nl', voice: 'david', character: 'default', emotion: 'neutral', sentence: '$@', blocking_call: false}"
}

function sergio-hear() {
    msg=$@
    echo "Sending trigger: $msg"
    rostopic pub --once /sergio/hmi/string std_msgs/String "data: '$msg'";
}

alias sergio-head-straight='sergio-head-move 0.0 0.0'
alias move-straight="rostopic pub -r 10 /cmd_vel geometry_msgs/Twist  '{linear:  {x: 0.1, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}'"
alias sergio-teleop='rosrun tue_teleop_keyboard teleop_twist_keyboard.py /cmd_vel:=/sergio/base/references'

alias sergio-base-reset-odom='rostopic pub --once /sergio/base/reset_odometry std_msgs/Bool 1'
alias sergio-top-kinect-show='rosrun image_view image_view image:=/sergio/top_kinect/rgb/image_rect_color'
alias reset-audio="amixer -- sset 'Master' -5dB && amixer -- sset 'Mic Boost' 10dB && amixer -- sset 'Capture' 16.50dB && amixer -- sset 'Digital' 3.5dB && amixer -- sset 'Mic' mute
"

alias sergio-action-server="rosrun action_server main.py sergio __ns:=sergio"

function depcheck
{
  type -P $1 &>/dev/null && return
  echo "Installing $2"
  sudo apt-get -y install $2 && return
  echo "Error installing $2"
  exit 1
}

# --------------------------------------------------------------------------------

function sergio-head-move {
    if [ -z "$2" ]; then
        echo "Usage: sergio-head-move PAN TILT"
        return
    fi

    rostopic pub /sergio/neck/references sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: ['neck_pan_joint', 'neck_tilt_joint'], position: [$1, $2], velocity: [0], effort: [0]}"  --once
}


function sergio-torso-move-joints {
    if [ -z "$2" ]; then
        echo "Usage: sergio-torso-move-joints ankle_joint hip_joint"
        echo "Physical limits: ankle_joint 0.152 to 1.00 [rad]"
        echo "                 hip_joint   1.007 to 2.31 [rad]"
        echo "Note: knee-joint is calculated with use of the ankle_joint."
        return
    fi
    
    ( rostopic pub /sergio/torso/references sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: ['ankle_joint', 'knee_joint', 'hip_joint'], position: [$1, $(echo "1.874*$1+0.1323" |bc) , $2], velocity: [0], effort: [0]}"  --once  &> /dev/null & )
}

function sergio-torso-move-idle {
    sergio-torso-move-joints 0.9 1.9
}

function sergio-torso-laser-move {
    if [ -z "$1" ]; then
        echo "Usage: sergio-torso-laser-move LASER_TILT    (range 0.0 ~ 0.324)"
        return
    fi

    rostopic pub /sergio/neck/references sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: ['laser_tilt_joint'], position: [$1], velocity: [0], effort: [0]}"  --once
}

alias sergio-case='sergio-torso-move-joints 0.45 1.5'

alias sergio-copy-my-id="ssh-copy-id amigo@sergio1.local; ssh-copy-id amigo@sergio2.local"
