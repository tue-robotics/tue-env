####################
#
# Robocup
#
####################

alias topic-monitor='rosrun robot_launch_files topic_monitor */scan */rgbd */joint_states */base/measurements'

function robocup-challenge
{
    if [ -z "$2" ]
    then
        echo -e "\e[0;31mPlease provide <robot-name> <robot-env>\033[0m"
        return 1
    fi

    if [[ "$2" != "rwc2016a" ]] && [[ "$2" != "rwc2016b" ]] && [[ "$2" != "robotics_testlabs" ]] && [[ "$2" != "rwc2016_common" ]]
    then
        echo -e "\e[0;31m<robot-env> is '$2' but must be robotics_testlabs, rwc2016a or rwc2016b\033[0m"
        return 1
    fi

    local robot_env=$(rosparam get /robot_env)
    if [[ "$robot_env" != "$2" ]]
    then
        echo -e "\e[0;31mGiven environment does not match middleware, which has environment '$robot_env'\033[0m"
        return 1
    fi
    export ROBOT_ENV=$2
}

function _robocup-challenge_complete
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    if [ $COMP_CWORD -eq 1 ]
    then
        COMPREPLY=( $(compgen -W "amigo sergio" -- $cur) )
    elif [ $COMP_CWORD -eq 2 ]
    then
        COMPREPLY=( $(compgen -W "rwc2016a rwc2016b robotics_testlabs" -- $cur) )
    fi
}
complete -F _robocup-challenge_complete robocup-challenge

function challenge-rips { robocup-challenge $@ && rosrun challenge_rips rips.py $1 "${@:3}"; }
function challenge-gpsr { robocup-challenge $@ && rosrun challenge_gpsr gpsr.py $1 "${@:3}"; }
function challenge-eegpsr { robocup-challenge $@ && rosrun challenge_eegpsr eegpsr.py $1 "${@:3}"; }
function challenge-manipulation-amcl { robocup-challenge $@ && rosrun challenge_manipulation manipulation.py $1 "${@:3}"; }
function challenge-navigation { robocup-challenge $@ && rosrun challenge_navigation challenge_navigation.py $1 "${@:3}"; }

complete -F _robocup-challenge_complete challenge-rips
complete -F _robocup-challenge_complete challenge-gpsr
complete -F _robocup-challenge_complete challenge-eegpsr
complete -F _robocup-challenge_complete challenge-manipulation-amcl
complete -F _robocup-challenge_complete challenge-navigation

function _robocup-complete-robot
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    if [ $COMP_CWORD -eq 1 ]
    then
        COMPREPLY=( $(compgen -W "amigo sergio" -- $cur) )
   fi
}

function challenge-speech-recognition { robocup-challenge $1 robotics_testlabs && rosrun challenge_speech_recognition speech_recognition.py $@; }
function challenge-final { robocup-challenge $1 robotics_testlabs && rosrun challenge_final challenge_final.py $@; }
function challenge-open { robocup-challenge $1 robotics_testlabs && rosrun challenge_open challenge_open.py $@; }
function challenge-manipulation-gmapping { robocup-challenge $1 robotics_testlabs && rosrun challenge_manipulation manipulation.py $@; }
function challenge-person-recognition { robocup-challenge $1 robotics_testlabs && rosrun challenge_person_recognition challenge_person_recognition.py $@; }
function challenge-restaurant { robocup-challenge $1 robotics_testlabs && rosrun challenge_restaurant challenge_restaurant.py $@; }
function challenge-following-and-guiding { robocup-challenge $1 robotics_testlabs && rosrun challenge_following_and_guiding challenge_following_and_guiding.py $@; }

complete -F _robocup-complete-robot challenge-speech-recognition
complete -F _robocup-complete-robot challenge-final
complete -F _robocup-complete-robot challenge-open
complete -F _robocup-complete-robot challenge-manipulation-gmapping
complete -F _robocup-complete-robot challenge-person-recognition
complete -F _robocup-complete-robot challenge-restaurant
complete -F _robocup-complete-robot challenge-following-and-guiding

####################
#
# git prompt
#
####################

# source ~/Documents/tools/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
# Explicitly unset color (default anyhow). Use 1 to set it.
GIT_PS1_SHOWCOLORHINTS=1
GIT_PS1_DESCRIBE_STYLE="branch"
GIT_PS1_SHOWUPSTREAM="auto git"

# PROMPT_COMMAND='__git_ps1 "[\[\033[01;34m\]\w\[\033[00m\]]" "\n'\
# '${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\$ "'


function ROS_MASTER_NAME {
    ROS_MASTER=$(echo $ROS_MASTER_URI | sed 's#http://\(.*\):.*#\1#')
    if [ "$ROS_MASTER" == "localhost" ] || [ "$ROBOT_REAL" == "true" ]; then
        echo ""
    else
        echo "($ROS_MASTER-core) "
    fi
}

PS1='[\[\033[01;34m\]\w\[\033[00m\]]$(__git_ps1)\n'\
'$(ROS_MASTER_NAME)${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\] \$ '

alias scores='scp amigo@192.168.2.110:/home/amigo/database/per_challenge/scores.html /tmp/scores.html && google-chrome /tmp/scores.html'

function _github-prompt() {
	if [[ -z $myuser || -z $mypass ]]
	then
		read  -p "Enter Username: " myuser
		read -s -p "Enter Password: " mypass
	fi
}

function github-list-repos() {
	_github-prompt
	out=$(curl -u $myuser:$mypass https://api.github.com/orgs/tue-robotics/repos?per_page=100)
	echo "$out" | jq .[].name -r
}

function _github-protect-branch() {
	echo "Protecting '$2' of '$1'"
	curl https://api.github.com/repos/$1/branches/$2 \
		-u $myuser:$mypass \
		-XPATCH \
		-H "Accept: application/vnd.github.loki-preview" \
		-d '{
			"protection": {
				"enabled": true,
				"required_pull_request_reviews": {
					"include_admins": true
				}
			}' \
		-sD - -o /dev/null | grep Status
}

function _github-check-protect-branch() {
    echo "Protecting '$2' of '$1'"
    curl https://api.github.com/repos/$1/branches/$2 \
        -u $myuser:$mypass \
        -H "Accept: application/vnd.github.loki-preview" \
        -s | jq .protection
}

function _github-view-protect-branch() {
	echo "View protection of '$2' of '$1'"
	_github-prompt
	curl https://api.github.com/repos/$1/branches/$2/protection \
		-u $myuser:$mypass \
		-H "Accept: application/vnd.github.loki-preview"
}

function github-protect-branches() {
    if [[ -z $1 ]]
    then
        echo -e "Usage: github-protect-branches <branch>"
    else
        echo "Protecting the $1 branch"
        _github-prompt
        repos=$(github-list-repos)

        while read -r repo; do
            _github-protect-branch "tue-robotics/$repo" "$1"
        done <<< "$repos"
    fi
}

function github-check-protect-branches() {
    if [[ -z $1 ]]
    then
        echo -e "Usage: github-protect-branches <branch>"
    else
        echo "Protecting the $1 branch"
        _github-prompt
        repos=$(github-list-repos)

        while read -r repo; do
            _github-check-protect-branch "tue-robotics/$repo" "$1"
        done <<< "$repos"
    fi
}