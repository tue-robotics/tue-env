#!/bin/bash
#_tue-check-env-vars || exit 1

TUE_INSTALL_DEPENDENCIES_DIR=$TUE_ENV_DIR/.env/dependencies
TUE_INSTALL_DEPENDENCIES_ON_DIR=$TUE_ENV_DIR/.env/dependencies-on
TUE_INSTALL_INSTALLED_DIR=$TUE_ENV_DIR/.env/installed

mkdir -p $TUE_INSTALL_DEPENDENCIES_DIR
mkdir -p $TUE_INSTALL_DEPENDENCIES_ON_DIR
mkdir -p $TUE_INSTALL_INSTALLED_DIR

TUE_INSTALL_TARGETS_DIR=$TUE_DIR/installer/targets

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function _make_sure_installed
{
    local pkgs_to_install=
    for pkg in $@
    do
        if ! dpkg -s $pkg &> /dev/null
        then
            pkgs_to_install="$pkgs_to_install $pkg"
        fi
    done

    if [ -n "$pkgs_to_install" ]
    then
        echo "Going to install: $pkgs_to_install"
        sudo apt-get install -y $pkgs_to_install
    fi
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

_make_sure_installed python-yaml git subversion

TUE_SYSTEM_DIR=$TUE_ENV_DIR/system
TUE_REPOS_DIR=$TUE_ENV_DIR/repos

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function randid {
    </dev/urandom tr -dc '0123456789abcdef' | head -c16; echo ""
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-error {
    echo -e "\033[38;5;1m
Error while installing target '$TUE_INSTALL_CURRENT_TARGET':

    $1
\033[0m"
    exit 1
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-warning {
    echo -e "\033[33;5;1m[$TUE_INSTALL_CURRENT_TARGET] WARNING: $1\033[0m"
    TUE_INSTALL_WARNINGS="    [$TUE_INSTALL_CURRENT_TARGET] $1\n${TUE_INSTALL_WARNINGS}"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-info {
    echo -e "\e[0;36m[$TUE_INSTALL_CURRENT_TARGET] INFO: $1\033[0m"
    TUE_INSTALL_INFOS="    [$TUE_INSTALL_CURRENT_TARGET] $1\n${TUE_INSTALL_INFOS}"
}


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-target {
    local target=$1

    #echo $target

    local parent_target=$TUE_INSTALL_CURRENT_TARGET

    # If the target has a parent target, add target as a dependency to the parent target
    if [ -n "$parent_target" ]
    then
        echo "$target" >> $TUE_INSTALL_DEPENDENCIES_DIR/$parent_target
        echo "$parent_target" >> $TUE_INSTALL_DEPENDENCIES_ON_DIR/$target
        sort $TUE_INSTALL_DEPENDENCIES_ON_DIR/$target -u -o $TUE_INSTALL_DEPENDENCIES_ON_DIR/$target
    fi

    if [ ! -f $TUE_INSTALL_STATE_DIR/$target ]; then

        if [ ! -d $TUE_INSTALL_TARGET_DIR/$target ]
        then
            tue-install-error "Target '$target' does not exist."
        fi

        local install_file=$TUE_INSTALL_TARGET_DIR/$target/install

        TUE_INSTALL_CURRENT_TARGET_DIR=$TUE_INSTALL_TARGET_DIR/$target
        TUE_INSTALL_CURRENT_TARGET=$target

        # Empty the target's dependency file
        > $TUE_INSTALL_DEPENDENCIES_DIR/$target

        if [ -f $install_file.yaml ]
        then
            local cmds=`$TUE_DIR/installer/scripts/parse-install-yaml $install_file.yaml`
            if [ $? -eq 0 ]; then
                for cmd in $cmds
                do
                    ${cmd//^/ }
                done
            else
                tue-install-error "Invalid install.yaml: $cmd"
            fi
        fi

        if [ -f $install_file.bash ]
        then
            source $install_file.bash
        fi

        touch $TUE_INSTALL_STATE_DIR/$target
    fi

    TUE_INSTALL_CURRENT_TARGET=$parent_target
    TUE_INSTALL_CURRENT_TARGET_DIR=$TUE_INSTALL_TARGET_DIR/$parent_target
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# tue-install-system does the same, this one is not used
# function tue-install-sys {
#     source=$1
#     TUE_INSTALL_SYSTEMS="$source $TUE_INSTALL_SYSTEMS"
# }
# 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function _show_update_message
{
    if [ -n "$2" ]
    then
        echo -e "\n    \033[1m$1\033[0m"
        echo "--------------------------------------------------"
        echo -e "$2"
        echo "--------------------------------------------------"
        echo ""
    else
        echo -e "\033[1m$1\033[0m: up-to-date"
    fi
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-svn
{
    if [ ! -d $2 ]; then
        res=$(svn co $1 $2 --trust-server-cert --non-interactive 2>&1)
    else
        res=$(svn up $2 --trust-server-cert --non-interactive 2>&1)
        if echo "$res" | grep -q "At revision";
        then
            res=
        fi
    fi

    _show_update_message $TUE_INSTALL_CURRENT_TARGET "$res"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

TUE_INSTALL_GIT_PULL_Q=()
function tue-install-git
{
    if [ ! -d $2 ]; then
        res=$(git clone --recursive $1 $2 2>&1)
    else
		# Check if we have already pulled the repo
		if [[ $TUE_INSTALL_GIT_PULL_Q =~ $2 ]]
		then
			# We have already pulled this repo, skip it
			res=
		else
			local mem_pwd=$PWD
			cd $2

			res=$(git pull --ff-only --prune 2>&1)

			TUE_INSTALL_GIT_PULL_Q+=$2

			if [ ! $? -eq 0 ]
			then
				tue-install-warning "$res"
			fi

			cd $mem_pwd

			if [[ $res == "Already up-to-date"* ]]
			then
				res=
			fi
		fi
    fi

    local version=$3
    if [ -n "$version" ];
    then
        mem_pwd=$PWD
        cd $2
        cres=$(git checkout $version 2>&1)
        if [[ $cres == "Already on "* ]]
        then
            cres=
        fi

        res=$res$cres
        cd $mem_pwd
    fi

    _show_update_message $TUE_INSTALL_CURRENT_TARGET "$res"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-apply-patch
{
    if [ -z "$1" ]
    then
        tue-install-error "Invalid tue-install-apply-patch call: needs patch file as argument."
    fi

    if [ -z "$TUE_INSTALL_PKG_DIR" ]
    then
        tue-install-error "Invalid tue-install-apply-patch call: package directory is unknown."
    fi

    patch_file=$TUE_INSTALL_CURRENT_TARGET_DIR/$1

    if [ ! -f $patch_file ]
    then
        tue-install-error "Invalid tue-install-apply-patch call: patch file '$1' does not exist."
    fi

    patch -s -N -r - -p0 -d $TUE_INSTALL_PKG_DIR < $patch_file
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-cp
{
    if [ -z "$2" ]
    then
        tue-install-error "Invalid tue-install-cp call: needs two arguments (source and target)."
    fi

    file=$TUE_INSTALL_CURRENT_TARGET_DIR/$1

    if [ ! -f $file ]
    then
        tue-install-error "Invalid tue-install-cp call: file '$1' does not exist."
    fi

    cp $file $2
    echo "cp $file $2"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Reads SOURCE_FILE and looks in TARGET_FILE for the first and last line of SOURCE_FILE. If these
# are not found, SOURCE_FILE is appended to TARGET_FILE. Otherwise, the appearance of the first and
# last line of SOURCE_FILE in TARGET_FILE, and everything in between, is replaced by the contents
# of SOURCE_FILE.
# This is useful for adding text blocks to files and allowing to change only that part of the file
# on a next update. It is advised to start and end SOURCE_FILE with unique tags, e.g.:
#
#    # BEGIN TU/E BLOCK
#    .... some text ...
#    # END TU/E BLOCK
#
function tue-install-add-text
{
    if [ -z "$2" ]
    then
        tue-install-error "Invalid tue-install-add-text call. Usage: tue-install-add-text SOURCE_FILE TARGET_FILE"
    fi

    local source_file=$TUE_INSTALL_CURRENT_TARGET_DIR/$1
    local target_file=$2

    if [ ! -f $source_file ]
    then
        tue-install-error "tue-install-add-text: No such file: $source_file"
    fi

    if [ ! -f $target_file ]
    then
        tue-install-error "tue-install-add-text: No such file: $target_file"
    fi

    local begin_tag=$(head -n 1 $source_file)
    local end_tag=$(tail -n 1 $source_file)
    local text=$(cat $source_file)

    if ! grep -q "$begin_tag" $target_file
    then
        echo -e "$text" >> $target_file
    else
        sed -e "/^$end_tag/r $source_file" -e "/^$begin_tag/,/^$end_tag/d" $target_file > $target_file.tmp
        mv $target_file.tmp $target_file
    fi
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-system
{
    if [ -z "$1" ]
    then
        tue-install-error "Invalid tue-install-system call: needs package as argument."
    fi

    TUE_INSTALL_SYSTEMS="$1 $TUE_INSTALL_SYSTEMS"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-pip
{
    if [ -z "$1" ]
    then
        tue-install-error "Invalid tue-install-pip call: needs package as argument."
    fi

    TUE_INSTALL_PIPS="$1 $TUE_INSTALL_PIPS"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Looks like it is not used
function tue-install-pkg
{
    type=$1
    source=$2
    sub_dir=$3
    version=$4

    if [ -z "$2" ]
    then
        tue-install-error "tue-install-pkg needs at least two arguments: source type (git, svn, ...) and source (url)"
    fi

    local pkgs_dir=$TUE_ENV_DIR/pkgs
    mkdir -p $pkgs_dir

    local repos_dir=$TUE_REPOS_DIR/$source
    # replace spaces with underscores
    repos_dir=${repos_dir// /_}
    # now, clean out anything that's not alphanumeric or an underscore
    repos_dir=${repos_dir//[^a-zA-Z0-9\/\.-]/_}

    if [ "$type" = "git" ]
    then
        tue-install-git $source $repos_dir $version
        echo "git clone $source" >> $INSTALL_DETAILS_FILE
        [ "$version" ] && echo "# NOTE: check-out version $version" >> $INSTALL_DETAILS_FILE
    elif [ "$type" = "svn" ]
    then
        tue-install-svn $source $repos_dir $version
        if [ "$version" ]
        then
            echo "svn co $source -r $version" >> $INSTALL_DETAILS_FILE
        else
            echo "svn co $source" >> $INSTALL_DETAILS_FILE
        fi
    else
        tue-install-error "Unknown install type: '${type}'"
    fi

    local pkg_name=$TUE_INSTALL_CURRENT_TARGET
    local pkg_dir=$pkgs_dir/$pkg_name

    if [ ! -d $repos_dir ]
    then
        tue-install-error "Checking out $source was not successful."
    fi

    if [ ! -d $repos_dir/$sub_dir ]
    then
        tue-install-error "Subdirectory '$sub_dir' does not exist for URL '$source'."
    fi

    if [ -L $pkg_dir ]
    then
        # Test if the current symbolic link points to the same repository dir. If not, give a warning
        # because it means the source URL has changed
        if [ ! $pkg_dir -ef $repos_dir/$sub_dir ]
        then
            tue-install-info "URL has changed to $source/$subdir"
            rm $pkg_dir
            ln -s $repos_dir/$sub_dir $pkg_dir
        fi
    elif [ ! -d $pkg_dir ]
    then
        # Create a symbolic link to the system workspace
        ln -s $repos_dir/$sub_dir $pkg_dir
    fi

    TUE_INSTALL_PKG_DIR=$ros_pkg_dir
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function tue-install-ros {
    type=$1
    source=$2
    sub_dir=$3
    version=$4

    [ -n "$TUE_ROS_DISTRO" ] || tue-install-error "Environment variable 'TUE_ROS_DISTRO' is not set."

    local ros_pkg_name=${TUE_INSTALL_CURRENT_TARGET#ros-}

    # First of all, make sure ROS itself is installed
    tue-install-target ros

    if [ "$type" = "system" ]; then
        TUE_INSTALL_SYSTEMS="ros-$TUE_ROS_DISTRO-$source $TUE_INSTALL_SYSTEMS"
        return
    fi

    if [ -z $ROS_PACKAGE_INSTALL_DIR ]; then
        tue-install-error "Environment variable ROS_PACKAGE_INSTALL_DIR not set."
    fi

    # Make sure the ROS package install dir exists
    mkdir -p $ROS_PACKAGE_INSTALL_DIR

    local ros_pkg_dir=$ROS_PACKAGE_INSTALL_DIR/$ros_pkg_name
    local repos_dir=$TUE_REPOS_DIR/$source
    # replace spaces with underscores
    repos_dir=${repos_dir// /_}
    # now, clean out anything that's not alphanumeric or an underscore
    repos_dir=${repos_dir//[^a-zA-Z0-9\/\.-]/_}

    #mkdir -p $repos_dir/..

    # For backwards compatibility: if the ros_pkg_dir already exists and is NOT
    # a symbolic link, then update this direcory instead of creating a symbolic
    # link from the repos directory. In other words, the ros_pkg_dir becomes the
    # repos_dir
    if [[ -d $ros_pkg_dir && ! -L $ros_pkg_dir ]]
    then
        repos_dir=$ros_pkg_dir
    fi

    if [ "$type" = "git" ]; then
        tue-install-git $source $repos_dir $version
        echo "git clone $source" >> $INSTALL_DETAILS_FILE
        [ "$version" ] && echo "# NOTE: check-out version $version" >> $INSTALL_DETAILS_FILE
    elif [ "$type" = "svn" ]; then
        tue-install-svn $source $repos_dir $version
        if [ "$version" ]; then
            echo "svn co $source -r $version" >> $INSTALL_DETAILS_FILE
        else
            echo "svn co $source" >> $INSTALL_DETAILS_FILE
        fi
    else
        tue-install-error "Unknown ros install type: '${type}'"
    fi

    if [ -d $repos_dir ]; then

        if [ ! -d $repos_dir/$sub_dir ]
        then
            tue-install-error "Subdirectory '$sub_dir' does not exist for URL '$source'."
        fi

        if [ -L $ros_pkg_dir ]
        then
            # Test if the current symbolic link points to the same repository dir. If not, give a warning
            # because it means the source URL has changed
            if [ ! $ros_pkg_dir -ef $repos_dir/$sub_dir ]
            then
                tue-install-info "URL has changed to $source/$subdir"
                rm $ros_pkg_dir
                ln -s $repos_dir/$sub_dir $ros_pkg_dir
            fi
        elif [ ! -d $ros_pkg_dir ]
        then
            # Create a symbolic link to the system workspace
            ln -s $repos_dir/$sub_dir $ros_pkg_dir
        fi

        if  [ -f $ros_pkg_dir/package.xml ]; then
            # Catkin

            deps=`$TUE_INSTALL_SCRIPTS_DIR/parse-ros-package-deps $ros_pkg_dir/package.xml`

            for dep in $deps
            do
                tue-install-target ros-$dep
            done

        else
            tue-install-warning "Does not contain a valid ROS package.xml."
        fi

    else
        tue-install-error "Checking out $source was not successful."
    fi

    TUE_INSTALL_PKG_DIR=$ros_pkg_dir
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

function generate_setup_file
{
    # Check whether this target was already added to the setup
    if [[ "$TUE_SETUP_TARGETS" == *" $1 "* ]];
    then
        return
    fi

    # Check if the dependency file exists. If not, return
    if [ ! -f $TUE_INSTALL_DEPENDENCIES_DIR/$1 ]
    then
        return
    fi

    # Recursively add a setup for each dependency
    deps=`cat $TUE_INSTALL_DEPENDENCIES_DIR/$1`
    for dep in $deps
    do
        if [ -f $TUE_INSTALL_TARGETS_DIR/$dep/setup ]
        then
            generate_setup_file $dep
        fi
    done

    local tue_setup_file=$TUE_INSTALL_TARGETS_DIR/$1/setup
    if [ -f $tue_setup_file ]
    then
        echo "source $tue_setup_file" >> $TUE_ENV_DIR/.env/setup/target_setup.bash
    fi

    TUE_SETUP_TARGETS=" $1$TUE_SETUP_TARGETS"
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

INSTALL_DETAILS_FILE=/tmp/tue-get-details-`randid`
> $INSTALL_DETAILS_FILE

# CATKIN PACKAGES
ROS_PACKAGE_INSTALL_DIR=$TUE_SYSTEM_DIR/src

TUE_INSTALL_TARGET_DIR=$TUE_INSTALL_TARGETS_DIR
TUE_INSTALL_SCRIPTS_DIR=$TUE_DIR/installer/scripts

TUE_INSTALL_STATE_DIR=/tmp/tue-installer/`randid`
mkdir -p $TUE_INSTALL_STATE_DIR

TUE_INSTALL_TEMP_DIR=/tmp/tue-installer/`randid`
mkdir -p $TUE_INSTALL_TEMP_DIR

TUE_INSTALL_SYSTEMS=
TUE_INSTALL_PIPS=

TUE_INSTALL_WARNINGS=
TUE_INSTALL_INFOS=

echo

if [ -d $TUE_REPOS_DIR/https: ]
then
    echo "Moving to new repos format: $TUE_REPOS_DIR"
    mv -bv "$TUE_REPOS_DIR/https:"/* "$TUE_REPOS_DIR/"
    rmdir -v "$TUE_REPOS_DIR/https:"
fi

if [ -d $TUE_REPOS_DIR/github.com ]
then
    echo "Moving to new old repos format: $TUE_REPOS_DIR"
    mkdir -p "$TUE_REPOS_DIR/https_/github.com"
    mv -bv "$TUE_REPOS_DIR/github.com"/* "$TUE_REPOS_DIR/https_/github.com"
    rmdir -v "$TUE_REPOS_DIR/github.com"
fi

if [ -z $1 ]
then
    # If no targets are provided, update all installed targets
    targets=`ls $TUE_INSTALL_INSTALLED_DIR`
else
    targets=$@
fi

for target in $targets
do
    if [ -d $TUE_INSTALL_TARGET_DIR/$target ]
    then
        # Mark as installed
        touch $TUE_INSTALL_INSTALLED_DIR/$target
    fi
    #echo $target
    tue-install-target $target
done

# (Re-)generate setup file
mkdir -p $TUE_ENV_DIR/.env/setup
echo "# This file was auto-generated by tue-install. Do not change this file." > $TUE_ENV_DIR/.env/setup/target_setup.bash

mkdir -p $TUE_INSTALL_DEPENDENCIES_DIR
installed_targets=`ls $TUE_INSTALL_DEPENDENCIES_DIR`
TUE_SETUP_TARGETS=" "
for t in $installed_targets
do
    generate_setup_file $t
done

# Display infos
if [ -n "$TUE_INSTALL_INFOS" ]; then
    echo -e "\e[0;36m\nSome information you may have missed:\n\n$TUE_INSTALL_INFOS\033[0m"
fi

# Display warnings
if [ -n "$TUE_INSTALL_WARNINGS" ]; then
    echo -e "\033[33;5;1m\nOverview of warnings:\n\n$TUE_INSTALL_WARNINGS\033[0m"
fi

# Remove temp directories
rm /tmp/tue-installer -rf

# Installing all system (apt-get) targets, which are collected during the install
if [ -n "$TUE_INSTALL_SYSTEMS" ]; then

    echo -e "\nsudo apt-get --assume-yes install $TUE_INSTALL_SYSTEMS" >> $INSTALL_DETAILS_FILE

    pkgs_to_install=
    for pkg in $TUE_INSTALL_SYSTEMS
    do
        if ! dpkg -s $pkg &> /dev/null # Check if pkg is not already installed
        then
            pkgs_to_install="$pkgs_to_install $pkg"
        fi
    done

    if [ -n "$pkgs_to_install" ]
    then
		echo -e "Going to run the following command:\n"
		echo "sudo apt-get install -y $pkgs_to_install"
        sudo apt-get install -y $pkgs_to_install
    fi
fi

# Installing all python (pip) targets, which are collected during the install
if [ -n "$TUE_INSTALL_PIPS" ]; then

    echo -e "\nsudo pip install $TUE_INSTALL_PIPS" >> $INSTALL_DETAILS_FILE

    # Check if python-pip is already installed, if not, install python-pip
    dpkg -s python-pip &> /dev/null || sudo apt-get install -y python-pip

    pkgs_to_install=
    pip_installed=$(pip freeze)
    pip_installed="$(echo "${pip_installed}" | tr '[:upper:]' '[:lower:]')"
    for pkg in $TUE_INSTALL_PIPS
    do
        if [ ! $(echo "$pip_installed" | grep $pkg) ] # Check if pkg is not already installed
        then
            pkgs_to_install="$pkgs_to_install $pkg"
        fi
    done

    if [ -n "$pkgs_to_install" ]
    then
		echo -e "Going to run the following command:\n"
		echo "sudo -H pip install -U $pkgs_to_install"
        sudo -H pip install -U $pkgs_to_install
    fi
fi
