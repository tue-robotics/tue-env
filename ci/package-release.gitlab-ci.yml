.package-release-base:
  extends: .build_image_base
  stage: Package Release
  variables:
    IMAGE_REGISTRY: "${CI_REGISTRY}/avular/common-tools/package-manager/tue-env"
    BASE_IMAGE: ${IMAGE_REGISTRY}/ros-${ROS_DISTRO}:latest
    DOCKERFILE: "dockerfiles/package-release.Dockerfile"
    TARGET_IMAGE_BASE_NAME: "${CI_REGISTRY_IMAGE}"
    LOGIN_TO_TARGET_IMAGE_REGISTRY: "false" # Only needs to be set to true if the target image should be pushed to an image repository other than ${IMAGE_REGISTRY}
    TARGET_IMAGE_REGISTRY: "" # Only needs to be set if LOGIN_TO_TARGET_IMAGE_REGISTRY = true
    BUILD_WS: "false"
    RELEASE_DEB: "false"
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"
  script:
    - TARGET_IMAGE="${TARGET_IMAGE_BASE_NAME}:${TARGET_IMAGE_TAG}-${TARGET_PLATFORM}"
    - PUSH_IMAGE="${PUSH_IMAGE:-"false"}"
    - BUILD_WS="${BUILD_WS:-"false"}"
    - |
      if [[ -z "${ROS_DISTRO}" ]]; then
        echo -e "\e[35;1mError! Mandatory job variable ROS_DISTRO is not set.\e[0m"
        exit 1
      fi
      if [[ -z "${PACKAGE}" ]]; then
        echo -e "\e[35;1mError! Mandatory job variable PACKAGE is not set.\e[0m"
        exit 1
      fi
      if [[ -f ${DOCKERFILE} ]]; then
        echo -e "\e[35;1mDockerfile found at ${DOCKERFILE} relative to the root of the repository. This will be used instead of the template Dockerfile from tue-env.\e[0m"
      else
        git clone --depth=1 --single-branch git@gitlab.com:avular/common-tools/package-manager/tue-env.git /tmp/tue-env
        mkdir -p $(dirname "${DOCKERFILE}")
        mv /tmp/tue-env/${DOCKERFILE} $(dirname "${DOCKERFILE}")
      fi
    - |
      echo -e "\e[35;1mCI_BRANCH                      = ${CI_COMMIT_BRANCH:-${CI_COMMIT_TAG}}\e[0m"
      echo -e "\e[35;1mCI_DEFAULT_BRANCH              = ${CI_DEFAULT_BRANCH}\e[0m"
      echo -e "\e[35;1mCHECKOUT_BRANCH                = ${CI_COMMIT_BRANCH:-${CI_COMMIT_TAG}}\e[0m]"
      echo -e "\e[35;1mTARGET_PLATFORM                = ${TARGET_PLATFORM}\e[0m"
      echo -e "\e[35;1mIMAGE_REGISTRY                 = ${IMAGE_REGISTRY}\e[0m"
      echo -e "\e[35;1mBASE_IMAGE                     = ${BASE_IMAGE}\e[0m"
      echo -e "\e[35;1mTARGET_IMAGE_BASE_NAME         = ${TARGET_IMAGE_BASE_NAME}\e[0m"
      echo -e "\e[35;1mLOGIN_TO_TARGET_IMAGE_REGISTRY = ${LOGIN_TO_TARGET_IMAGE_REGISTRY}\e[0m"
      echo -e "\e[35;1mTARGET_IMAGE_REGISTRY          = ${TARGET_IMAGE_REGISTRY}\e[0m"
      echo -e "\e[35;1mPUSH_IMAGE                     = ${PUSH_IMAGE}\e[0m"
      echo -e "\e[35;1mPACKAGE                        = ${PACKAGE}\e[0m"
      echo -e "\e[35;1mBUILD_WS                       = ${BUILD_WS}\e[0m"
      echo -e "\e[35;1mRELEASE_DEB                    = ${RELEASE_DEB}\e[0m"
      echo -e "\e[35;1mPACKAGE_REGISTRY_URL           = ${PACKAGE_REGISTRY_URL}\e[0m"
    - |
      if [ "${LOGIN_TO_TARGET_IMAGE_REGISTRY}" = true ] ; then
        if [[ -z "${TARGET_IMAGE_REGISTRY}" ]]; then
          echo -e "\e[35;1mError! Mandatory job variable TARGET_IMAGE_REGISTRY is not set, but it is required when LOGIN_TO_TARGET_IMAGE_REGISTRY = true.\e[0m"
          exit 1
        fi
        if [[ -z "${TARGET_IMAGE_REGISTRY_USER}" ]]; then
          echo -e "\e[35;1mError! Mandatory job variable TARGET_IMAGE_REGISTRY_USER is not set. , but it is required when LOGIN_TO_TARGET_IMAGE_REGISTRY = true.\nIt is recommended to set this variable through the project's CI/CD settings\e[0m"
          exit 1
        fi
        if [[ -z "${TARGET_IMAGE_REGISTRY_TOKEN}" ]]; then
          echo -e "\e[35;1mError! Mandatory job variable TARGET_IMAGE_REGISTRY_TOKEN is not set. , but it is required when LOGIN_TO_TARGET_IMAGE_REGISTRY = true.\nIt is recommended to set this variable through the project's CI/CD settings\e[0m"
          exit 1
        fi
        echo ${TARGET_IMAGE_REGISTRY_TOKEN} | docker login -u ${TARGET_IMAGE_REGISTRY_USER} --password-stdin ${TARGET_IMAGE_REGISTRY}
      fi
    - |
      MOUNT_DIR=".tmp/repos"
      RELEASE_DIR=".tmp/release"
      mkdir -p "${MOUNT_DIR}" "${RELEASE_DIR}"
      docker buildx build \
        --platform=linux/${TARGET_PLATFORM} \
        --output=type=image,push=${PUSH_IMAGE} \
        --ssh=default \
        --file "${DOCKERFILE}" \
        --build-arg BASE_IMAGE="${BASE_IMAGE}" \
        --build-arg CI=true \
        --build-arg BRANCH="${CI_COMMIT_BRANCH:-${CI_COMMIT_TAG}}" \
        --build-arg PACKAGE="${PACKAGE}" \
        --build-arg BUILD_WS="${BUILD_WS}" \
        --build-arg RELEASE_DEB="${RELEASE_DEB}" \
        --build-arg REGISTRY_URL="${PACKAGE_REGISTRY_URL}" \
        --build-arg TOKEN="${CI_JOB_TOKEN}" \
        --tag "${TARGET_IMAGE}" .

  rules:
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE=="web"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: 'never'
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: 'never'

# Job templates that need to be extended
.package-release [amd64]:
  extends: .package-release-base
  tags:
    - linux
    - docker-privileged
    - x86_64
  variables:
    TARGET_PLATFORM: 'amd64'

.package-release [arm64]:
  extends: .package-release-base
  tags:
    - linux
    - docker-privileged
    - arm64
  variables:
    TARGET_PLATFORM: 'arm64'

.package-release:
  extends: .package-release-base
  tags:
    - linux
    - docker-privileged
  script:
    - !reference [.manifest, script]
